%{
//Robert Willburn
//Compilers
//23 Oct 17
#include <iostream>
#include <iomanip>
#include <string>
#include "node.hpp"
#include "nodeVals.h"
#include "program3.tab.h"

using std::string;
using std::endl;
using std::cerr;
using std::cout;

int col = 1;
int err = 0;

void yyerror (const char *string)
{
 cerr << string << endl;
 return;
}
%}

%option yylineno noyywrap
%option outfile ="program3_lex.cpp"

SPACE [ \t]

%%

"int" {
   yylval.vals = new nodeVals (yylineno, col, yyleng, "INT", yytext);
   col += yyleng;
   return INT;
   }
"print" {
   return PRINT;
   }
"void" { 
   return VOID;
   }
"if" {
   return IF;
   }
"read" {
   return READ;
   }
"else" {
   return ELSE;
   }
"class" {
   return CLASS;
   }
"return" {
   return RETURN;
   }
"this" {
   return THIS;
   }
"new" {
   return NEW;
   }
"while" {
   return WHILE;
   }
[_a-zA-Z][_a-zA-Z0-9]* {
   yylval.vals = new nodeVals (yylineno, col, yyleng, "ID", yytext);
   col += yyleng;
   return ID;
   }
"[" { return LBRACKET; }

"]" { return RBRACKET; }

\( {
   return LPAREN;
   }
\) {
   return RPAREN;
   } 
\+ {
   return PLUS;
   }
-  {
   return MINUS;
   }
\* {
   return TIMES;
   }
\= {
   return EQUALS;
   }
\/ {
   return DIV;
   }
{SPACE}+ {
   }
[0-9]+ {
    yylval.vals = new nodeVals (yylineno, col, yyleng, "NUMBER", yytext);
    col += yyleng;
    return NUM;
   }
\=\= {
   return EQUALTO;
   }
\<\= {
   return LESSOREQ;
   }
\>\= {
   return GREATEROREQ;
   }
\!\= {
   return NOTEQUAL;
   }
\> {
   return GREATER;
   }
\< {
   return LESS;
   }
\! {
   return NOT;
   }
\|\| { 
   return OR;
   }
\&\& {
   return AND;
   }
\% {
   return MOD;
   }
";" {
     return SEMI;
   }

\/\/[^\n]*\n {
   }
[\n] {
   }
.  {
   cerr << yytext << endl;
   }

%%

